import bpy

## IMAGE OPTIONS
# set the dimensions of any new images made, in pixels
# [width, height]
size = [512,512]

# set the following variables to change the interpolation
# of the nodes generated by this script
# options are : 'Linear', 'Closest', 'Cubic', or 'Smart'
albedo_interpolation = 'Closest'
roughness_interpolation = 'Closest'
normal_interpolation = 'Linear'


## SAVING OPTIONS
# set if the generated textures are saved or not
# True or False
save = True

# set the path for saved images
# do not forget the trailing \
# remember to escape each \ with a \
path = "C:\\Users\\tomax\\Documents\\one world project\\characters\\ADAM\\"

## ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

# easy references to common objects used by blender.
C = bpy.context
D = bpy.data
O = C.view_layer.objects
I = bpy.data.images

# find the active and selected objects
active = C.active_object
selected = C.selected_objects ; selected.remove(active)
for object in selected : object.select_set(False)
material = D.materials[active.name]
nodes = material.node_tree.nodes

# create or find the albedo texture
if I.find(active.name + "_albedo") : albedo_tex = I[active.name + "_albedo"]
else : albedo_tex = bpy.data.images.new(active.name + "_albedo",size[0],size[1])

# create or find the albedo node
if 'albedo' in nodes : albedo_node = nodes['albedo']
else :
    albedo_node = nodes.new('ShaderNodeTexImage')
    albedo_node.name = 'albedo'
    albedo_node.label = 'albedo'
    albedo_node.interpolation = albedo_interpolation

# apply the albedo image to the albedo node
albedo_node.image = albedo_tex

# create or find the roughness texture
if I.find(active.name+"_roughness") : roughness_tex = I[active.name + "_roughness"]
else : roughness_tex = bpy.data.images.new(active.name+"_roughness",size[0],size[1])

# create or find the roughness node
if 'roughness' in nodes : roughness_node = nodes['roughness']
else: 
    roughness_node = nodes.new('ShaderNodeTexImage')
    roughness_node.name = 'roughness'
    roughness_node.label = 'roughness'
    roughness_node.interpolation = roughness_interpolation
    
# apply the roughness image to the roughness node
roughness_node.image = roughness_tex

# create or find the normal texture
if I.find(active.name+"_normal") : normal_tex = I[active.name + "_normal"]
else : normal_tex = bpy.data.images.new(active.name+"_normal",size[0],size[1])

# create or find the normal node
if 'normal' in nodes : normal_node = nodes['normal']
else: 
    normal_node = nodes.new('ShaderNodeTexImage')
    normal_node.name = 'normal'
    normal_node.label = 'normal'
    normal_node.interpolation = normal_interpolation

# apply the normal image to the normal node
normal_node.image = normal_tex

# loop through each selcted object and bake from the active object
for object in selected:
    O.active = object
    active.select_set(True)
    # bake to the albedo node
    albedo_node.select = True
    nodes.active = albedo_node
    bpy.ops.object.bake (
        type = 'DIFFUSE', 
        use_selected_to_active = True, 
        target = 'IMAGE_TEXTURES',
        margin = 2,
        cage_extrusion = .02
    )
    # bake to the roughness node
    roughness_node.select = True
    nodes.active = roughness_node
    bpy.ops.object.bake (
        type = 'ROUGHNESS', 
        use_selected_to_active = True, 
        target = 'IMAGE_TEXTURES',
        margin = 2,
        cage_extrusion = .02
    )
    # bake to the normal node
    normal_node.select = True
    nodes.active = normal_node
    bpy.ops.object.bake (
        type = 'NORMAL', 
        use_selected_to_active = True, 
        target = 'IMAGE_TEXTURES',
        margin = 2,
        cage_extrusion = .02
    )

# reset the selcted and active objects to avoid confusion
O.active = active
for object in selected : object.select_set(True)

# find the node tree
tree = material.node_tree

# find the bsdf shader
if 'Principled BSDF' in nodes : bsdf = nodes['Principled BSDF']
else:
    bsdf = nodes.new('Principled BSDF')
    bsdf.name = 'Principled BSDF'
    bsdf.label = 'Principled BSDF'

# link the bsdf to the materal output
tree.links.new( bsdf.outputs['BSDF'], nodes['Material Output'].inputs['Surface'])

# link the  albedo and roughness nodes to the shader
tree.links.new(albedo_node.outputs["Color"], bsdf.inputs['Base Color'])
tree.links.new(roughness_node.outputs["Color"], bsdf.inputs['Roughness'])

# check we have a bump node
if 'Bump' in nodes : bump = nodes['Bump']
else: 
    bump = nodes.new('ShaderNodeBump')
    bump.name = 'Bump'
    bump.label = 'Bump'

# connect the normal to the bump, and the bump to the shader
tree.links.new(normal_node.outputs["Color"], bump.inputs['Height'])
tree.links.new(bump.outputs["Normal"], bsdf.inputs['Normal'])

# if save, save
if save:
    albedo_tex.save_render(filepath=path+active.name+'_albedo.png')
    roughness_tex.save_render(filepath=path+active.name+'_roughness.png')
    normal_tex.save_render(filepath=path+active.name+'_normal.png')

print('\n \nJOBS DONE\n')
